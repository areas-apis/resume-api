openapi: 3.1.0

info:
  title: Resume API
  summary: 'The Resume API is your resume’s source of truth. Use it to store your resume and retrieve it for a variety of use cases. For example, you can use this service to display your resume on your website, or make it available as a PDF — all from a single source.'
  description: |
    to-do
  contact:
    name: Christian Areas
    email: me@areas.me
  license:
    name: GNU General Public License v3.0
    identifier: GPL-3.0
  version: 0.1.0

servers:
  - url: 'http://localhost:3000/api'
    description: Local

tags:
  - name: candidate
  - name: who
  - name: experience
  - name: skills
  - name: education

paths:
  /candidate:
    post:
      tags:
        - candidate
      operationId: createCandidate
      summary: Create a Candidate
      description: |
        Create a candidate in the system.
      requestBody:
        description: 'An object that represents a candidate. It includes the candidate’s details, such as their name, email, phone number, and links to their social media profiles.'
        required: true
        content:
          application/json:
            schema:
              $ref: ./models/Candidate.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/Candidate.yaml
  
  '/candidate/{candidateId}':
    get:
      tags:
        - candidate
      operationId: getCandidate
      summary: to-do
      description: |
        to-do
      parameters:
        - name: candidateId
          in: path
          description: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '404':
          description: Not found
    patch:
      tags:
        - candidate
      operationId: updateCandidate
      summary: to-do
      description: |
        to-do
      parameters:
        - name: candidateId
          in: path
          description: candidateId
          required: true
          schema:
            type: string
      requestBody:
        description: |
          to-do
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '404':
          description: Not found
    delete:
      tags:
        - candidate
      operationId: deleteCandidate
      summary: to-do
      description: |
        to-do
      parameters:
        - name: candidateId
          in: path
          description: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '404':
          description: Not found

components:
  schemas:
    Candidate:
      $ref: ./models/Candidate.yaml
    Who:
      $ref: ./schemas/Who.yaml
    Experience:
      $ref: ./schemas/Experience.yaml
    Skills:
      $ref: ./schemas/Skills.yaml
    Education:
      $ref: ./schemas/Education.yaml
