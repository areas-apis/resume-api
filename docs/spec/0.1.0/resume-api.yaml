openapi: 3.1.0

info:
  title: Resume API
  description: |
    The Resume API is your resume’s source of truth. Use it to store your resume and retrieve it for a variety of use cases. For example, you can use this service to display your resume on your website, or make it available as a PDF — all from a single source.
  contact:
    name: Christian Areas
    email: me@areas.me
  license:
    name: GNU General Public License v3.0
    identifier: GPL-3.0
  version: 0.1.0

servers:
  - url: 'http://localhost:3000/api'
    description: Local
  - url: 'https://resume-stage.areas.me/api'
    description: Stage
  - url: 'https://resume.areas.me/api'
    description: Production

tags:
  - name: Resume
  - name: Candidate
  - name: Who
  - name: Experience
  - name: Skill
  - name: Education

paths:
  #
  # Candidate
  #
  '/candidate':
    # POST /candidate (createCandidate)
    post:
      tags:
        - Candidate
      operationId: createCandidate
      summary: Create a Candidate
      description: |
        Create a candidate in the system.
      requestBody:
        $ref: '#/components/requestBodies/createCandidate'
      responses:
        '201':
          $ref: '#/components/responses/candidateCreated'
        '400':
          $ref: '#/components/responses/candidateInfoMissingIncorrect'
        '409':
          $ref: '#/components/responses/candidateAlreadyExists'
  '/candidate/{candidateId}':
    # GET /candidate/{candidateId} (getCandidate)
    get:
      tags:
        - Candidate
      operationId: getCandidate
      summary: Get a Candidate
      description: |
        Get a candidate from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      responses:
        '200':
          $ref: '#/components/responses/candidate'
        '400':
          $ref: '#/components/responses/candidateInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/candidateNotFound'
    # PATCH /candidate/{candidateId} (updateCandidate)
    patch:
      tags:
        - Candidate
      operationId: updateCandidate
      summary: Update a Candidate
      description: |
        Update a candidate in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      requestBody:
        $ref: '#/components/requestBodies/updateCandidate'
      responses:
        '200':
          $ref: '#/components/responses/candidate'
        '400':
          $ref: '#/components/responses/candidateInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/candidateNotFound'
    # DELETE /candidate/{candidateId} (deleteCandidate)
    delete:
      tags:
        - Candidate
      operationId: deleteCandidate
      summary: Delete a Candidate
      description: |
        Delete a candidate from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      responses:
        '200':
          $ref: '#/components/responses/candidate'
        '400':
          $ref: '#/components/responses/candidateInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/candidateNotFound'
  #
  # Who
  #
  '/candidate/{candidateId}/who':
    # POST /candidate/{candidateId}/who (createWho)
    post:
      tags:
        - Who
      operationId: createWho
      summary: Create a Candidate’s Who
      description: |
        Create a candidate’s who in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      requestBody:
        $ref: '#/components/requestBodies/createWho'
      responses:
        '201':
          $ref: '#/components/responses/whoCreated'
        '400':
          $ref: '#/components/responses/whoInfoMissingIncorrect'
        '409':
          $ref: '#/components/responses/whoAlreadyExists'
  '/candidate/{candidateId}/who/{whoId}':
    # GET /candidate/{candidateId}/who/{whoId} (getWho)
    get:
      tags:
        - Who
      operationId: getWho
      summary: Get a Candidate’s Who
      description: |
        Get a candidate’s who from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/whoId'
      responses:
        '200':
          $ref: '#/components/responses/who'
        '400':
          $ref: '#/components/responses/whoInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/whoNotFound'
    # PATCH /candidate/{candidateId}/who/{whoId} (updateWho)
    patch:
      tags:
        - Who
      operationId: updateWho
      summary: Update a Candidate’s Who
      description: |
        Update a candidate’s who in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/whoId'
      requestBody:
        $ref: '#/components/requestBodies/updateWho'
      responses:
        '200':
          $ref: '#/components/responses/who'
        '400':
          $ref: '#/components/responses/whoInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/whoNotFound'
    # DELETE /candidate/{candidateId}/who/{whoId} (deleteWho)
    delete:
      tags:
        - Who
      operationId: deleteWho
      summary: Delete a Candidate’s Who
      description: |
        Delete a candidate’s who from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/whoId'
      responses:
        '200':
          $ref: '#/components/responses/who'
        '400':
          $ref: '#/components/responses/whoInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/whoNotFound'
  #
  # Experience
  #
  '/candidate/{candidateId}/experience':
    # POST /candidate/{candidateId}/experience (createExperience)
    post:
      tags:
        - Experience
      operationId: createExperience
      summary: Create a Candidate’s Experience
      description: |
        Create a candidate’s experience in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      requestBody:
        $ref: '#/components/requestBodies/createExperience'
      responses:
        '201':
          $ref: '#/components/responses/experienceCreated'
        '400':
          $ref: '#/components/responses/experienceInfoMissingIncorrect'
        '409':
          $ref: '#/components/responses/experienceAlreadyExists'
  '/candidate/{candidateId}/experience/{experienceId}':
    # GET /candidate/{candidateId}/experience/{experienceId} (getExperience)
    get:
      tags:
        - Experience
      operationId: getExperience
      summary: Get a Candidate’s Experience
      description: |
        Get a candidate’s experience from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/experienceId'
      responses:
        '200':
          $ref: '#/components/responses/experience'
        '400':
          $ref: '#/components/responses/experienceInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/experienceNotFound'
    # PATCH /candidate/{candidateId}/experience/{experienceId} (updateExperience)
    patch:
      tags:
        - Experience
      operationId: updateExperience
      summary: Update a Candidate’s Experience
      description: |
        Update a candidate’s experience in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/experienceId'
      requestBody:
        $ref: '#/components/requestBodies/updateExperience'
      responses:
        '200':
          $ref: '#/components/responses/experience'
        '400':
          $ref: '#/components/responses/experienceInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/experienceNotFound'
    # DELETE /candidate/{candidateId}/experience/{experienceId} (deleteExperience)
    delete:
      tags:
        - Experience
      operationId: deleteExperience
      summary: Delete a Candidate’s Experience
      description: |
        Delete a candidate’s experience from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/experienceId'
      responses:
        '200':
          $ref: '#/components/responses/experience'
        '400':
          $ref: '#/components/responses/experienceInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/experienceNotFound'
  #
  # Skill
  #
  '/candidate/{candidateId}/skill':
    # POST /candidate/{candidateId}/skill (createSkill)
    post:
      tags:
        - Skill
      operationId: createSkill
      summary: Create a Candidate’s Skill
      description: |
        Create a candidate’s skill in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      requestBody:
        $ref: '#/components/requestBodies/createSkill'
      responses:
        '201':
          $ref: '#/components/responses/skillCreated'
        '400':
          $ref: '#/components/responses/skillInfoMissingIncorrect'
        '409':
          $ref: '#/components/responses/skillAlreadyExists'
  '/candidate/{candidateId}/skill/{skillId}':
    # GET /candidate/{candidateId}/skill/{skillId} (getSkill)
    get:
      tags:
        - Skill
      operationId: getSkill
      summary: Get a Candidate’s Skill
      description: |
        Get a candidate’s skill from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/skillId'
      responses:
        '200':
          $ref: '#/components/responses/skill'
        '400':
          $ref: '#/components/responses/skillInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/skillNotFound'
    # PATCH /candidate/{candidateId}/skill/{skillId} (updateSkill)
    patch:
      tags:
        - Skill
      operationId: updateSkill
      summary: Update a Candidate’s Skill
      description: |
        Update a candidate’s skill in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/skillId'
      requestBody:
        $ref: '#/components/requestBodies/updateSkill'
      responses:
        '200':
          $ref: '#/components/responses/skill'
        '400':
          $ref: '#/components/responses/skillInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/skillNotFound'
    # DELETE /candidate/{candidateId}/skill/{skillId} (deleteSkill)
    delete:
      tags:
        - Skill
      operationId: deleteSkill
      summary: Delete a Candidate’s Skill
      description: |
        Delete a candidate’s skill from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/skillId'
      responses:
        '200':
          $ref: '#/components/responses/skill'
        '400':
          $ref: '#/components/responses/skillInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/skillNotFound'
  #
  # Education
  #
  '/candidate/{candidateId}/education':
    # POST /candidate/{candidateId}/education (createEducation)
    post:
      tags:
        - Education
      operationId: createEducation
      summary: Create a Candidate’s Education
      description: |
        Create a candidate’s education in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
      requestBody:
        $ref: '#/components/requestBodies/createEducation'
      responses:
        '201':
          $ref: '#/components/responses/educationCreated'
        '400':
          $ref: '#/components/responses/educationInfoMissingIncorrect'
        '409':
          $ref: '#/components/responses/educationAlreadyExists'
  '/candidate/{candidateId}/education/{educationId}':
    # GET /candidate/{candidateId}/education/{educationId} (getEducation)
    get:
      tags:
        - Education
      operationId: getEducation
      summary: Get a Candidate’s Education
      description: |
        Get a candidate’s education from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/educationId'
      responses:
        '200':
          $ref: '#/components/responses/education'
        '400':
          $ref: '#/components/responses/educationInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/educationNotFound'
    # PATCH /candidate/{candidateId}/education/{educationId} (updateEducation)
    patch:
      tags:
        - Education
      operationId: updateEducation
      summary: Update a Candidate’s Education
      description: |
        Update a candidate’s education in the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/educationId'
      requestBody:
        $ref: '#/components/requestBodies/updateEducation'
      responses:
        '200':
          $ref: '#/components/responses/education'
        '400':
          $ref: '#/components/responses/educationInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/educationNotFound'
    # DELETE /candidate/{candidateId}/education/{educationId} (deleteEducation)
    delete:
      tags:
        - Education
      operationId: deleteEducation
      summary: Delete a Candidate’s Education
      description: |
        Delete a candidate’s education from the system.
      parameters:
        - $ref: '#/components/parameters/candidateId'
        - $ref: '#/components/parameters/educationId'
      responses:
        '200':
          $ref: '#/components/responses/education'
        '400':
          $ref: '#/components/responses/educationInfoMissingIncorrect'
        '404':
          $ref: '#/components/responses/educationNotFound'

components:
  schemas:
    Candidate:
      $ref: './models/Candidate.yaml'
    Who:
      $ref: './models/Who.yaml'
    Experience:
      $ref: './models/Experience.yaml'
    Skill:
      $ref: './models/Skill.yaml'
    Education:
      $ref: './models/Education.yaml'

  parameters:
    candidateId:
      name: candidateId
      in: path
      description: The candidate’s unique identifier.
      required: true
      schema:
        type: string
        format: uuid
        example: d5a5e5dc-f2dd-4f5a-8745-0e835d9f26a5
    whoId:
      name: whoId
      in: path
      description: The who’s unique identifier.
      required: true
      schema:
        type: string
        format: uuid
        example: fcf47884-9c4c-487d-947f-9449f588a383
    experienceId:
      name: experienceId
      in: path
      description: The experience’s unique identifier.
      required: true
      schema:
        type: string
        format: uuid
        example: 637f9a15-ea20-4597-990b-d67bd20db1c1
    skillId:
      name: skillId
      in: path
      description: The skill’s unique identifier.
      required: true
      schema:
        type: string
        format: uuid
        example: 97d3165d-e1dd-4955-972c-95ebf04dd091
    educationId:
      name: educationId
      in: path
      description: The education’s unique identifier.
      required: true
      schema:
        type: string
        format: uuid
        example: f61e2435-caf4-4ec8-901f-2b0760de9d2c

  requestBodies:
    # Candidate POST
    createCandidate:
      content:
        application/json:
          schema:
            $ref: './models/Candidate.yaml#/oneOf/1'
    # Candidate PATCH
    updateCandidate:
      content:
        application/json:
          schema:
            $ref: './models/Candidate.yaml#/oneOf/2'
    # Who POST
    createWho:
      content:
        application/json:
          schema:
            $ref: './models/Who.yaml#/oneOf/1'
    # Who PATCH
    updateWho:
      content:
        application/json:
          schema:
            $ref: './models/Who.yaml#/oneOf/2'
    # Experience POST
    createExperience:
      content:
        application/json:
          schema:
            $ref: './models/Experience.yaml#/oneOf/1'
    # Experience PATCH
    updateExperience:
      content:
        application/json:
          schema:
            $ref: './models/Experience.yaml#/oneOf/2'
    # Skill POST
    createSkill:
      content:
        application/json:
          schema:
            $ref: './models/Skill.yaml#/oneOf/1'
    # Skill PATCH
    updateSkill:
      content:
        application/json:
          schema:
            $ref: './models/Skill.yaml#/oneOf/2'
    # Education POST
    createEducation:
      content:
        application/json:
          schema:
            $ref: './models/Education.yaml#/oneOf/1'
    # Education PATCH
    updateEducation:
      content:
        application/json:
          schema:
            $ref: './models/Education.yaml#/oneOf/2'

  responses:
    # Candidate 200
    candidate:
      description: OK
      content:
        application/json:
          schema:
            $ref: './models/Candidate.yaml#/oneOf/0'
    # Candidate 201
    candidateCreated:
      description: Created
      content:
        application/json:
          schema:
            $ref: './models/Candidate.yaml#/oneOf/0'
    # Candidate 400
    candidateInfoMissingIncorrect:
      description: Candidate information missing or incorrect
    # Candidate 404
    candidateNotFound:
      description: Candidate not found
    # Candidate 409
    candidateAlreadyExists:
      description: Candidate already exists
    # Who 200
    who:
      description: OK
      content:
        application/json:
          schema:
            $ref: './models/Who.yaml#/oneOf/0'
    # Who 201
    whoCreated:
      description: Created
      content:
        application/json:
          schema:
            $ref: './models/Who.yaml#/oneOf/0'
    # Who 400
    whoInfoMissingIncorrect:
      description: Who information missing or incorrect
    # Who 404
    whoNotFound:
      description: Who not found
    # Who 409
    whoAlreadyExists:
      description: Who already exists
    # Experience 200
    experience:
      description: OK
      content:
        application/json:
          schema:
            $ref: './models/Experience.yaml#/oneOf/0'
    # Experience 201
    experienceCreated:
      description: Created
      content:
        application/json:
          schema:
            $ref: './models/Experience.yaml#/oneOf/0'
    # Experience 400
    experienceInfoMissingIncorrect:
      description: Experience information missing or incorrect
    # Experience 404
    experienceNotFound:
      description: Experience not found
    # Experience 409
    experienceAlreadyExists:
      description: Experience already exists
    # Skill 200
    skill:
      description: OK
      content:
        application/json:
          schema:
            $ref: './models/Skill.yaml#/oneOf/0'
    # Skill 201
    skillCreated:
      description: Created
      content:
        application/json:
          schema:
            $ref: './models/Skill.yaml#/oneOf/0'
    # Skill 400
    skillInfoMissingIncorrect:
      description: Skill information missing or incorrect
    # Skill 404
    skillNotFound:
      description: Skill not found
    # Skill 409
    skillAlreadyExists:
      description: Skill already exists
    # Education 200
    education:
      description: OK
      content:
        application/json:
          schema:
            $ref: './models/Education.yaml#/oneOf/0'
    # Education 201
    educationCreated:
      description: Created
      content:
        application/json:
          schema:
            $ref: './models/Education.yaml#/oneOf/0'
    # Education 400
    educationInfoMissingIncorrect:
      description: Education information missing or incorrect
    # Education 404
    educationNotFound:
      description: Education not found
    # Education 409
    educationAlreadyExists:
      description: Education already exists
